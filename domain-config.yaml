authorize:
  sameDomain:
    postgres: same_domain_authorization
  crossDomain:
    postgres: cross_domain_authorization
postgres:
  tables:
    translatable_targets:
      type: application/json;type=translatable_target
      columns:
        source_language: TEXT
        source_string: TEXT
        path: JSONB
    translations:
      type: application/json;type=translation
      columns:
        translatable_target: TEXT
        language: TEXT
        value: TEXT
  functions:
    iso_639_to_language_config:
      returns: TEXT
      language: PLpgSQL
      body: |
        BEGIN
          RETURN CASE
            WHEN ISO639Code LIKE 'ar%' THEN 'arabic'
            WHEN ISO639Code LIKE 'hy%' THEN 'armenian'
            WHEN ISO639Code LIKE 'eu%' THEN 'basque'
            WHEN ISO639Code LIKE 'ca%' THEN 'catalan'
            WHEN ISO639Code LIKE 'da%' THEN 'danish'
            WHEN ISO639Code LIKE 'nl%' THEN 'dutch'
            WHEN ISO639Code LIKE 'en%' THEN 'english'
            WHEN ISO639Code LIKE 'fi%' THEN 'finnish'
            WHEN ISO639Code LIKE 'fr%' THEN 'french'
            WHEN ISO639Code LIKE 'de%' THEN 'german'
            WHEN ISO639Code LIKE 'el%' THEN 'greek'
            WHEN ISO639Code LIKE 'hi%' THEN 'hindi'
            WHEN ISO639Code LIKE 'hu%' THEN 'hungarian'
            WHEN ISO639Code LIKE 'id%' THEN 'indonesian'
            WHEN ISO639Code LIKE 'ga%' THEN 'irish'
            WHEN ISO639Code LIKE 'it%' THEN 'italian'
            WHEN ISO639Code LIKE 'lt%' THEN 'lithuanian'
            WHEN ISO639Code LIKE 'ne%' THEN 'nepali'
            WHEN ISO639Code LIKE 'no%' THEN 'norwegian'
            WHEN ISO639Code LIKE 'pt%' THEN 'portuguese'
            WHEN ISO639Code LIKE 'ro%' THEN 'romanian'
            WHEN ISO639Code LIKE 'ru%' THEN 'russian'
            WHEN ISO639Code LIKE 'sr%' THEN 'serbian'
            WHEN ISO639Code LIKE 'es%' THEN 'spanish'
            WHEN ISO639Code LIKE 'sv%' THEN 'swedish'
            WHEN ISO639Code LIKE 'ta%' THEN 'tamil'
            WHEN ISO639Code LIKE 'tr%' THEN 'turkish'
            WHEN ISO639Code LIKE 'yi%' THEN 'yiddish'
            ELSE 'simple'
          END;
        END;
      arguments:
      - name: ISO639Code
        type: TEXT
    same_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
    cross_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingDomain
        type: TEXT
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
  queries:
    search-translations: |
      SELECT
        (translatable_targets.path->0) AS translatable_item,
        translatable_targets.path AS path,
        translatable_targets.id AS translatable_target,
        translatable_targets.source_language AS source_language,
        translations.id AS translation,
        translations.value AS match,
        translations.language AS language
      FROM translatable_targets
      JOIN metadata target_md ON target_md.id = translatable_targets.id
      JOIN translations ON translatable_targets.id = translations.translatable_target
      WHERE
        target_md.owner = $1
        AND to_tsvector(iso_639_to_language_config(language)::regconfig, value)
              @@ plainto_tsquery(iso_639_to_language_config(language)::regconfig, $2)
    translatable-items: |
      SELECT DISTINCT (path->0) AS translatable_item
      FROM translatable_targets
      JOIN metadata ON metadata.id = translatable_targets.id
      WHERE jsonb_typeof(path) = 'array'
        AND (
          metadata.owner = $1
          OR (
            metadata.domain = $DOMAIN
            AND $1 = $DOMAIN
          )
        )
    translate-item:
      domains:
      - f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:5888
      - c0f3a481-d4d5-4133-a198-94a325aa4536.localhost:6061
      body: |
        SELECT
          translatable_targets.id AS translatable_target,
          translatable_targets.path AS path,
          COALESCE(
            translations.language,
            translatable_targets.source_language
          ) AS language,
          COALESCE(
            translations.value,
            translatable_targets.source_string
          ) AS value,
          (translations.value IS NULL) AS is_fallback,
          (translatable_targets.source_language = translations.language) AS is_source,
          target_md.updated <= translation_md.updated AS is_current
        FROM translatable_targets
        JOIN metadata target_md ON target_md.id = translatable_targets.id
        LEFT JOIN LATERAL (
          SELECT
            t.id,
            t.language,
            t.value,
            lp.priority
          FROM translations t
          JOIN unnest($2::text[]) WITH ORDINALITY lp(language, priority)
            ON t.language = lp.language
          WHERE t.translatable_target = translatable_targets.id
          ORDER BY lp.priority
          LIMIT 1
        ) translations ON true
        LEFT JOIN metadata translation_md ON translation_md.id = translations.id
          AND translation_md.owner = $DOMAIN
        WHERE (
            target_md.owner = $REQUESTING_DOMAIN
            OR $REQUESTING_DOMAIN = $DOMAIN
          )
          AND translatable_targets.path->0 = to_jsonb($1::text)
    translations-for-item:
      domains:
      - f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:5888
      - c0f3a481-d4d5-4133-a198-94a325aa4536.localhost:6061
      body: |
        SELECT
          translatable_targets.id AS translatable_target,
          translatable_targets.path AS path,
          COALESCE(
            translations.language,
            translatable_targets.source_language
          ) AS language,
          COALESCE(
            translations.value,
            translatable_targets.source_string
          ) AS value,
          (translations.value IS NULL) AS fallback,
          (translatable_targets.source_language = translations.language) AS is_source,
          target_md.updated <= translation_md.updated AS is_current
        FROM translatable_targets
        JOIN metadata target_md ON target_md.id = translatable_targets.id
        LEFT JOIN LATERAL (
          SELECT
            t.id,
            t.language,
            t.value
          FROM translations t
          WHERE t.translatable_target = translatable_targets.id
            AND (
              t.language = ANY($2)
              OR t.language = translatable_targets.source_language
            )
        ) translations ON true
        LEFT JOIN metadata translation_md ON translation_md.id = translations.id
          AND translation_md.owner = $DOMAIN
        WHERE (
            target_md.owner = $REQUESTING_DOMAIN
            OR $REQUESTING_DOMAIN = $DOMAIN
          )
          AND translatable_targets.path->0 = to_jsonb($1::text)
agent: |
  import Agent from 'npm:@knowlearning/agents/deno.js'

  const TRANSLATION_TYPE = 'application/json;type=translation'
  const TRANSLATABLE_TARGET_TYPE = 'application/json;type=translatable_target'

  Agent.on('child', child => {
    const { environment: { user } } = child
    Agent.log(`GOT CHILD CONNECTION!!!!!!!! ${user}`)

    child.on('mutate', async ({ scope, id, patch }) => {
      if (scope.startsWith('translatable_target/')) {
        //  TODO: validate user is a domain agent with rights to access
        const  { source_language, source_string } = await Agent.state(id)
        await setTranslation(id, source_language, source_string)
      }
      else if (scope.startsWith('translations/')) {
        const [,, language] = scope.split('/')

        const paths = await Agent.state(id)

        // TODO: smarter updating based on patch data
        await Promise.all(
          Object
            .entries(paths)
            .map(async ([translatable_target, language_string]) => {
              return setTranslation(translatable_target, language, language_string)
            })
        )
      }
      else if (await isTranslatableItem(id)) {
        await handleTranslatableItem(id)
      }
    })
  })


  async function setTranslation(id, language, string) {
    const scope = await getTranslationScope(id, language)

    scope.translatable_target = id
    scope.language = language
    scope.value = string
  }

  async function getTranslationScope(id, lang) {
    const name = `translation/${id}/${lang}`
    const metadata = await Agent.metadata(name)

    if (metadata.active_type !== TRANSLATION_TYPE) metadata.active_type = TRANSLATION_TYPE

    return Agent.state(name)
  }

  function resolvePath(path, value) {
    while (path.length && value) value = value[path.shift()]
    return value
  }

  async function handleTranslatableItem(id) {
    const itemState = await Agent.state(id)
    itemState.translations.paths.forEach(async path => {
      const translatableTargetName = `translatable_target/${JSON.stringify([id, ...path])}`
      Agent.log('GETTING METADATA', translatableTargetName)
      const translatableTargetMetadata = await Agent.metadata(translatableTargetName)
      Agent.log('GOT METADATA', JSON.parse(JSON.stringify(translatableTargetMetadata)))

      if (translatableTargetMetadata.active_type !== TRANSLATABLE_TARGET_TYPE) {
        translatableTargetMetadata.active_type = TRANSLATABLE_TARGET_TYPE
      }

      Agent.log('GETTING STATE', translatableTargetName)
      const translatableTarget = await Agent.state(translatableTargetName)
      Agent.log('GOT STATE', JSON.stringify(translatableTarget))

      const { source_language } = itemState.translations

      translatableTarget.source_language = source_language
      translatableTarget.path = [id, ...path]
      Agent.log('RESOLVING PATH', [...path])
      const source_string = resolvePath([...path], itemState)
      Agent.log('GOT SOURCE STRING', translatableTargetName, source_string)
      if (source_string) {
        translatableTarget.source_string = source_string
        await setTranslation(
          translatableTargetMetadata.id,
          source_language,
          source_string
        )
      }
    })
  }

  async function isTranslatableItem(id) {
    const state = await Agent.state(id)
    //  TODO: validate schema
    return !!state.translations
  }
