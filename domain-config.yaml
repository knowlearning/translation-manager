authorize:
  sameDomain:
    postgres: same_domain_authorization
  crossDomain:
    postgres: cross_domain_authorization
postgres:
  tables:
    translatable_targets:
      type: application/json;type=translatable_target
      columns:
        source_language: TEXT
        source_string: TEXT
        path: TEXT[]
    translations:
      type: application/json;type=translation
      columns:
        language: TEXT
        value: TEXT
        path: TEXT[]
        current: BOOLEAN
  functions:
    same_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
    cross_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingDomain
        type: TEXT
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
  queries:
    metadata: SELECT * FROM metadata LIMIT 20
agent: |
  import Agent, { getAgent } from 'npm:@knowlearning/agents/deno.js'

  Agent.on('child', child => {
    const { environment: { user } } = child
    //  TODO: validate user is a domain agent
    Agent.log(`GOT CHILD CONNECTION!!!!!!!! ${user}`)
    const TranslatedItemDomainAgent = getAgent(user)

    child.on('mutate', async ({ scope, patch, id }) => {
      if (patch.find(({ path }) => path[0] === 'ping')) {
        Agent.log(`GOT item translation!!!!!!!!! ${user} ${scope}`)
        const itemTranslation = await TranslatedItemDomainAgent.state(scope)
        itemTranslation.boo = 'ya'
      }
    })
  })