authorize:
  sameDomain:
    postgres: same_domain_authorization
  crossDomain:
    postgres: cross_domain_authorization
postgres:
  tables:
    translatable_targets:
      type: application/json;type=translatable_target
      columns:
        source_language: TEXT
        source_string: TEXT
        path: JSONB
    translations:
      type: application/json;type=translation
      columns:
        translatable_target: TEXT
        language: TEXT
        value: TEXT
  functions:
    same_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
    cross_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingDomain
        type: TEXT
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
  queries:
    metadata: SELECT * FROM metadata LIMIT 20
    translatable-items: |
      SELECT DISTINCT (path->0) AS translatable_item
      FROM translatable_targets
      WHERE jsonb_typeof(path) = 'array'
    translation-set:
      domains:
      - f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:5888
      body: |
        SELECT
          translatable_targets.path,
          COALESCE(translations.language, translatable_targets.source_language) AS language,
          COALESCE(translations.value, translatable_targets.source_string) AS value,
          (translations.value IS NULL) AS fallback
        FROM translatable_targets
        JOIN metadata target_md ON target_md.id = translatable_targets.id
        LEFT JOIN translations ON translations.translatable_target = translatable_targets.id
          AND translations.language LIKE $2 || '%'
        LEFT JOIN metadata translation_md ON translation_md.id = translations.id
          AND translation_md.owner = 'f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:5889'
        WHERE target_md.owner = 'f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:5888'
          AND translatable_targets.path->0 = to_jsonb($1::text)
agent: |
  import Agent, { getAgent } from 'npm:@knowlearning/agents/deno.js'

  const TRANSLATION_TYPE = 'application/json;type=translation'

  Agent.on('child', child => {
    const { environment: { user } } = child
    //  TODO: validate user is a domain agent
    Agent.log(`GOT CHILD CONNECTION!!!!!!!! ${user}`)
    const TranslatedItemDomainAgent = getAgent(user)

    child.on('mutate', async ({ scope, patch, id }) => {
      if (scope.startsWith('translatable_target/')) {
          const  { source_language, source_string } = await Agent.state(id)
          const translationScopeName = `translation/${id}/${source_language}`
          const translationScopeMetadata = await Agent.metadata(translationScopeName)

          if (translationScopeMetadata.active_type !== TRANSLATION_TYPE) {
              translationScopeMetadata.active_type = TRANSLATION_TYPE
          }

          const translationScope = await Agent.state(translationScopeName)

          translationScope.translatable_target = id
          translationScope.language = source_language
          translationScope.value = source_string
      }
    })
  })
